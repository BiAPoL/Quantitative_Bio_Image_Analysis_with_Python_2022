## Automatically creating a GUI from a function with magicgui

What if we could 'magically' simplify all that and just say: 'Dear computer, please create a GUI for my function'?
We can ~~literally~~ almost do that with 🧙‍♂️[magicgui](https://napari.org/stable/guides/magicgui.html)! If we put some annotations right next to the variables in our function, we can create the GUI with one line of code 😻 ! So let's not wait any longer and add those annotations to our function:

```Python
from napari.types import ImageData, LabelsData

def flood(image: ImageData, delta: float = 0, new_level: int = 0) -> LabelsData: 
    new_level = delta*85
    label_image = image <= new_level
    label_image = label_image.astype(int)*13 # label 13 is blue in napari
    return(label_image)
```

Here we are specifying that:
* `image` is data from a napari image layer (`ImageData`);
* `delta` is `float`;
* `new_level` is `integer`;
* output `label_image` will hold data from a napari labels layer (`LabelsData`).

You may have noticed that we placed `new_level` as input instead of output. That's because magicgui creates widgets (like buttons, sliders, etc) based on the input variables.

Now, here it comes... the one-liner: 🥁🥁

`flood_widget = magicgui(flood)`

Done! GUI was created and stored in `flood_widget`. The full code and the result become like this:

```Python
import napari
from skimage.io import imread
from magicgui import magicgui
from napari.types import ImageData, LabelsData

def flood(image: ImageData, delta: float=0, new_level: int=0) -> LabelsData: 
    new_level = delta*85
    label_image = image <= new_level
    label_image = label_image.astype(int)*13 # label 13 is blue in napari
    return(label_image)

viewer = napari.Viewer()
napari_image = imread('21_Map_of_Tabuaeran_Kiribati_blue.png')    # Reads an image from file
viewer.add_image(napari_image, name='napari_island')              # Adds the image to the viewer and give the image layer a name 

flood_widget = magicgui(flood)                                    # Create GUI with magicgui
viewer.window.add_dock_widget(flood_widget, area='right')         # Add our gui instance to napari viewer
```

<img alt="figure 3" id="figure3" src="images/napari_flood_tool3.png" />

Neat! Just a couple of things missing though. We only get Spinboxes now, what about the Slider? Don't worry, we can fix this still maintaining the "one-liner", although a bigger one now 😬 . We can add widget options as python dictionaries, like this:

```Python
flood_widget = magicgui(flood, delta={'label': 'Temperature Increase (Δ°C):', 
                                           'min': 0, 'max' : 3, 'step': 0.1},
                                new_level={'label':'Sea Level (dm):', 'widget_type':'Slider',
                                           'min': 0, 'max' : 255, 'enabled' : False},
                                auto_call=True)
```

Now, you get practically the same result as the earlier approach. If you don't know the widget options, take a look [here](https://napari.org/magicgui/usage/widget_overview.html) to find the widget you want and discover more about its parameters.
We discarded the button here by using `auto_call=True`. This means that the callback function will be executed whenever the user change any of the inputs. This results in a smoother usability, but be careful, because if the callback function is too slow, it may get called several times before returning, which can lead to frozen screens.

<img alt="figure 4" id="figure4" src="images/napari_flood_tool4.png" />

One thing missing is that the 'Sea level' slider does not get updated since it is an input now. But, we can append a callback function to the spibox that updates the slider every time delta changes! Add the following code after creating the widget with magicgui (thanks Talley Lambert for this tip!):

```
@flood_widget.delta.changed.connect  # Connect a function to delta (spinbox widget)
def update_level(delta: float):
    flood_widget.new_level.value = delta * 85  # Update slider when spinbox changes
```

You can look for further documentation and tutorials at [magicgui quickstart](https://napari.org/magicgui/usage/quickstart.html) and [magicgui in napari](https://napari.org/guides/stable/magicgui.html).


